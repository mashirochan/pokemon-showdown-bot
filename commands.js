var http = require('http');
var sys = require('sys');

if (config.serverid === 'showdown') {
	var https = require('https');
	var csv = require('csv-parse');
}

exports.commands = {
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Help commands /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    

	git: function(arg, by, room, con) {
		var text = config.excepts.indexOf(toId(by)) < 0 ? '/pm ' + by + ', ' : '';
		text += '__' + config.nick + '__ source code: ' + config.fork;
		this.say(con, room, text);
	},
	guide: 'commands',
	help: 'commands',
	commands: function(arg, by, room, con) {
		this.say(con, room, 'Commands for ' + config.nick + ': ' + config.botguide);
	},
	about: function(arg, by, room, con) {
		if (!this.hasRank(by, ' +%@&#~') || room.charAt(0) === ',') return false;
		this.say(con, room, '__' + config.nick + '__ is a bot that was created with the use of Mashiro-chan\'s Pokemon Showdown Bot shell. Original code is property of TTT.');
	},

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Developer commands ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////      
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////        

	reload: 'update',
	update: function(arg, by, room, con) {
		if (!this.hasRank(by, '~')) return false;
		try {
			this.uncacheTree('./commands.js');
			Commands = require('./commands.js').commands;
			this.say(con, room, (room.charAt(0) === ',' ? '' : '/pm ' + toId(by) + ', ') + '__Commands updated!__');
		}
		catch (e) {
			error('failed to update: ' + sys.inspect(e));
		}
	},
	say: function(arg, by, room, con) {
		if (!this.hasRank(by, '~')) return false;
		if (arg.indexOf(", ") == -1) return this.say(con, room, (room.charAt(0) === ',' ? '' : '/pm ' + toId(by) + ', ') + '__No room has been specified!__');
		var input = arg.split(", ");
		var tarRoom = toId(input[0]);
		var message = input[1];
		this.say(con, tarRoom, message);
	},
	js: function(arg, by, room, con) {
		if (!this.hasRank(by, '~')) return false;
		try {
			var result = eval(arg.trim());
		}
		catch (e) {
			this.say(con, room, e.name + ": " + e.message);
		}
	},
};
